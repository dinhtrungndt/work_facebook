"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Auth = void 0;
const axios_1 = __importDefault(require("axios"));
class Auth {
    constructor(clientKey, clientSecret) {
        this._clientKey = clientKey;
        this._clientSecret = clientSecret;
    }
    getAccessToken(authCode) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield (0, axios_1.default)({
                url: 'https://open-api.tiktok.com/oauth/access_token/',
                method: 'post',
                params: {
                    client_key: this._clientKey,
                    client_secret: this._clientSecret,
                    code: authCode,
                    grant_type: 'authorization_code',
                },
            });
            return result.data;
        });
    }
    refreshAccessToken(refreshToken) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = yield (0, axios_1.default)({
                url: 'https://open-api.tiktok.com/oauth/refresh_token/',
                method: 'post',
                params: {
                    client_key: this._clientKey,
                    refresh_token: refreshToken,
                    grant_type: 'refresh_token',
                },
            });
            return result.data;
        });
    }
    revokeAccessToken(openId, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield (0, axios_1.default)({
                url: 'https://open-api.tiktok.com/oauth/revoke/',
                method: 'post',
                params: {
                    open_id: openId,
                    access_token: accessToken,
                },
            });
            return result.data;
        });
    }
}
exports.Auth = Auth;
